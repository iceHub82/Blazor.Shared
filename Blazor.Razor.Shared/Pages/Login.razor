@page "/Login"

@using Blazor.Razor.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager Navigation;
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Login to Access Application</h3>

<div class="alert alert-info">
    This is a dummy login page, providing `Test` for the Username and Password will authenticate you.
</div>

<EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="alert alert-danger" hidden="@loginModel.LoginFailureHidden">
        Invalid login attempt, please correct and try again.
    </div>
    <div class="form-group">
        <label>Username</label>
        <InputText @bind-Value="loginModel.Username" class="form-control" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
    </div>
    <div class="form-group mt-1">
        <button type="submit" class="btn btn-primary w-100">Login Now</button>
    </div>
</EditForm>

@code {
    private LoginViewModel loginModel = new();

    private async Task HandleValidSubmit()
    {
        //Valiate user acount
        var successful = ValidateLogin(out string jwtToken);

        //Not successful, don't need to do anything
        if (!successful)
            return;

        await ((ExternalAuthStateProvider)AuthenticationStateProvider).LogInAsync();

        Navigation.NavigateTo("/");
    }

    public bool ValidateLogin(out string jwtToken)
    {
        if (loginModel.Username.Equals("Test") && loginModel.Password.Equals("Test"))
        {
            jwtToken = "123456";
            return true;
        }

        //Not valid
        jwtToken = null;
        loginModel.LoginFailureHidden = false;
        return false;
    }
}